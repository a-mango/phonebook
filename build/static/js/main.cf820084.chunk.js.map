{"version":3,"sources":["components/Notification.js","components/Filter.js","components/Persons.js","components/PersonForm.js","services/persons.js","App.js","index.js"],"names":["Notification","notifications","length","map","n","i","className","style","backgroundColor","color","key","message","Filter","filter","setFilter","onSubmit","value","onChange","event","target","Persons","persons","handleDelete","person","id","name","number","onClick","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","alerts","setAlerts","useEffect","personService","initialPersons","personsToShow","p","toUpperCase","includes","confirm","window","notify","newAlert","setTimeout","a","updatePerson","oldPerson","find","returnedPerson","catch","preventDefault","newPerson","some","createdPerson","concat","error","undefined","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf820084.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Notification = ({notifications}) => {\n  if (notifications.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      {notifications.map((n, i) => (\n        <div className=\"notification\" style={{ backgroundColor: n.color }} key={i}>\n          {n.message}\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default Notification;\n","import React from 'react'\n\nconst Filter = ({filter, setFilter}) => {\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Filter</h2>\n      <form onSubmit={setFilter}>\n        <div>\n          filter: <input value={filter} onChange={handleFilterChange} />\n        </div>\n      </form> \n    </div>\n  )\n}\n\nexport default Filter\n","import React from \"react\";\n\nconst Persons = ({ persons, handleDelete }) => {\n  \n  return (\n    <div>\n      <h2>Numbers</h2>\n      {persons.map((person) => (\n        <p key={person.id}>\n          {person.name} {person.number} <button onClick={() => handleDelete(person)}>delete</button>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst PersonForm = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n  return (\n    <div>\n      <h2>Add number</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PersonForm;\n","import axios from \"axios\";\n\nconst baseUrl = \"/api/persons\";\n\n/**\n * Get all the persons on the server\n */\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\n/**\n * Create a new person on the server\n *\n * @param  {} newObject The person to create\n */\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\n/**\n * Modifies a person on the server\n *\n * @param  {} id The ID of the person to modify\n * @param  {} newObject The modified person\n */\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\n/**\n * Removes a person from the server\n *\n * @param  {} id The ID of the person to remove\n */\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request;\n};\n\nexport default { getAll, create, update, remove };\n","import React, { useState, useEffect } from \"react\";\nimport Notification from \"./components/Notification\";\nimport Filter from \"./components/Filter\";\nimport Persons from \"./components/Persons\";\nimport PersonForm from \"./components/PersonForm\";\nimport personService from \"./services/persons\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [alerts, setAlerts] = useState([]);\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const nameExists = (name) =>\n    persons.some((p) => p.name.toUpperCase() === name.toUpperCase());\n\n  const personsToShow =\n    filter === \"\"\n      ? persons\n      : persons.filter((p) =>\n          p.name.toUpperCase().includes(filter.toUpperCase())\n        );\n\n  const confirm = (message) => window.confirm(message);\n\n  const notify = (color, message) => {\n    const newAlert = { color, message };\n    setAlerts([...alerts, newAlert]);\n    setTimeout(() => {\n      setAlerts(alerts.filter((a) => a !== newAlert));\n    }, 5000);\n  };\n\n  const resetForm = () => {\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    // Check if person already exists, then place either a create or an update call\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n\n    // If person already exists, prompt if its number should be updated\n    if (nameExists(newName)) {\n      updatePerson(newPerson);\n    } else {\n      personService\n        .create(newPerson)\n        .then((createdPerson) => {\n          setPersons(persons.concat(createdPerson));\n          notify(`green`, `${createdPerson.name} was added to the phonebook`);\n        })\n        .catch((error) => {\n          notify(`red`, error.response.data.error);\n        });\n    }\n    resetForm();\n  };\n\n  const updatePerson = (person) => {\n    if (\n      confirm(\n        `${newName} already exists. Replace the old number with a new one?`\n      )\n    ) {\n      // Find the existing person to get the id\n      const oldPerson = persons.find(\n        (p) => p.name.toUpperCase() === person.name.toUpperCase()\n      );\n      // Send REST call to update person on the server\n      personService\n        .update(oldPerson.id, person)\n        .then((returnedPerson) => {\n          setPersons(\n            persons.map((p) =>\n              p.id !== returnedPerson.id ? p : returnedPerson\n            )\n          );\n          notify(`green`, `The number for ${person.name} was updated`);\n        })\n        .catch(() => {\n          setPersons(persons.filter((p) => p.id !== person.id));\n          notify(\n            `red`,\n            `The person ${person.name} was not found on the server`\n          );\n        });\n    }\n  };\n\n  const deletePerson = (person) => {\n    // Check if the person was found or display an error\n    if (person === undefined) {\n      window.alert(`Person with id ${person.id} was not found`);\n    } else {\n      // Confirm the deletion\n      if (confirm(`Delete ${person.name} from the phonebook?`)) {\n        personService.remove(person.id).catch(() => {\n          notify(\n            `orange`,\n            `The person ${person.name} does not exist on the server`\n          );\n        });\n        // Remove the person from the application's state\n        setPersons((persons) => persons.filter((p) => p.id !== person.id));\n        notify(\n          `green`,\n          `The person ${person.name} was deleted from the phonebook`\n        );\n      }\n    }\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification notifications={alerts} />\n      <Filter filter={filter} setFilter={setFilter} />\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <Persons persons={personsToShow} handleDelete={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}